global !p
import php_namespace_detect as nsd
def get_clsfile_return(path):
	definition = '{} {} '.format(
		nsd.get_class_type(path), nsd.get_class_name(path)
	)
	namespace = nsd.get_namespace(path)

	if not namespace:
		return definition
	else:
		return "namespace {};\n\n{}".format(namespace, definition)

def full_path():
	return vim.current.buffer.name
endglobal

snippet ns "PHP Namespace" !bs
namespace `!p snip.rv = nsd.get_namespace(full_path())`;
endsnippet

snippet _ns "Inline PHP Namespace" !s
`!p snip.rv = nsd.get_namespace(full_path())`
endsnippet

snippet clsfile "PHP Class/Interface File" !bs
<?php
`!p snip.rv = get_clsfile_return(full_path())`$1
{
	$0
}
endsnippet

snippet tsts "PHPUnit Tests File" !bs
<?php
namespace `!p snip.rv = nsd.get_namespace(full_path())`;

use PHPUnit_Framework_TestCase;
use Mockery as m;

`!p snip.rv = nsd.get_class_type(full_path()) + ' ' + nsd.get_class_name(full_path())` extends ${1:PHPUnit_Framework_TestCase}
{
	public function setUp()
	{
		$0
	}

	public function tearDown()
	{
		m::close();
	}
}
endsnippet

snippet irepofn "Repository Interface Functions" !bs
/**
 * Find all $1s
 *
 * @return []${2:$1}
 */
public function findAll();

/**
 * Find a $1 by ID
 *
 * @param int $id
 *
 * @return null|$2 The $1 null when not found
 */
public function find($id);

/**
 * Create a new $1
 * 
 * @param $2 $3 $1 to create
 * 
 * @return bool Whether the operation succeeded
 */ 
public function create($2 $3);

/**
 * Update an existing $1
 * 
 * @param $2 $3 $1 to update
 * 
 * @return bool Whether the operation succeeded
 */ 
public function update($2 $3);

/**
 * Create or update a $1, depending on whether the primary key is set
 * 
 * @param $2 $3 $1 to create or update
 * 
 * @return bool Whether the operation succeeded
 */ 
public function save($2 $3);
endsnippet

snippet clsrepofn "Repository Class Functions" !bs
/**
 * {@inheritdoc}
 */
public function findAll()
{
	throw new \Exception("Not implemented");
}

/**
 * {@inheritdoc}
 */
public function find($id)
{
	throw new \Exception("Not implemented");
}

/**
 * {@inheritdoc}
 */
public function create($1)
{
	throw new \Exception("Not implemented");
}

/**
 * {@inheritdoc}
 */
public function update($1)
{
	throw new \Exception("Not implemented");
}

/**
 * {@inheritdoc}
 */
public function save($1)
{
	throw new \Exception("Not implemented");
}
endsnippet

snippet _c "Constructor" !bs
public function __construct($1)
{
	$0
}
endsnippet

snippet cest "Codeception Cest" !bs
<?php
namespace `!p snip.rv = nsd.get_namespace(full_path())`;

use Codeception\\Scenario;

use AcceptanceTester;
use AcceptanceTester\\$1;

class `!p snip.rv = nsd.get_class_name(full_path())`
{
}
endsnippet

snippet cestfn "Codeception Cest Function" !bs
/**
 * $1
 */
public function $2(AcceptanceTester $I, Scenario $scenario)
{
	$I = new $3($scenario);

	$0
}
endsnippet
